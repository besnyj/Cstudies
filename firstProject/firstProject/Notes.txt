- Compilation: process of transforming the source code into a
format that the computer can understand. That's what a compiler'll do.

- After "build", a .exe file is created and we can use that to share
our project with other people. Other files are also important as
the .dll file for example.

- every code in C# is compiled into a .dll

- variables:
    - has to have a type, value and name.
    - variables cannot change type
    - when using the variable for the first time, remember to declare
    the variable type.
    - it is possible to create our own types.
    - strings are texts and ints are full numbers

    - declaration means that a variable with given type and name will
    exist.
    - initialization is assign the value for the given variable.
    - initialization at declariation is creating the variable and assign
    a value at the same line
    - it is possible to declare multiple variables in the same line
    - keywords can't be used as variable names
    - first character cannot be a digit
    - names are case-sensitive.
    - bool are boolean that can only take two values: true or false.
        - it is possible to create a boolean sing operators as such:
        var isLargerThan5 = 10 > 5;
        - here, we created a boolean with a "true" value as 10 is
        indeed larger than 5. It is possible to do that with all the other
        operators.

- operators:
    - +, -, *, /
    - In an expression with multiple operators, the operators with higher precedence
     are evaluated before the operators with lower precedence.
    - always use parenthesis when using operators
    - ++a or --b will increment or decrement  the value by one
    - == if something is equal to something else
    - != inequality operator
    - >, <, >=, <= work as usual
    - % returns the remainder the division of X by Y
    - AND (&&) and OR (||) are the usual and or or operators in C#.
        - && will check if all the conditions are met
        - || checks if any condition is met

* pro tip: we can break the lines into two to make it more readable:
ex:     var isEqualTo123OrEvenAndSmallerThan20 =
            number == 123 || (number % 2 == 0 && number < 20);

* pro tip: short-circuiting -  when comparing more than one condition using
    and or or, compare the smaller operations first as it will save time in case
    the conditions are/are not met, so the program doesnt need to spend time
    with the more complex calculations.


- explicitly typed variables are variables initialized with
  specific types as int, strings and etc.
- implicitly typed variables are variables initialized with
  the "var" keyword. They also can't change types after being declared.
-code snippets are quick way of inserting code into the program.

- debugging with breakpoints:
    - gives the chance to look at the state of our code without
    having to use the "print" function on the console.

- // are used to add comment to the code
- /* this is used for multiple line comments */

- if and else example in C#:
    - if(userChoice == "ABC")
    {
        Console.WriteLine("User typed ABC")
    }
    else if(userChoice = "")
    {
        Console.WriteLine("User typed nothing")
    }
    else
    {
        Console.WriteLine("User did not type ABC")
    }

    * remember that elif will only be checked if the first IF does not pass. However if we
    use if and if, it will independently check both ifs and return both answers

- scopes: defines a part of the program where a particular variable is accessible.
- code block is a block defined by curly brackets

* pro tip: avoid repetitions on your code

- methods are the same as functions in c#
    - to create a method:
        void MethodName(return var type args)
        {
            method
        }
- Compilation: process of transforming the source code into a
format that the computer can understand. That's what a compiler'll do.

- After "build", a .exe file is created and we can use that to share
our project with other people. Other files are also important as
the .dll file for example.

- every code in C# is compiled into a .dll

- variables:
    - has to have a type, value and name.
    - variables cannot change type
    - when using the variable for the first time, remember to declare
    the variable type.
    - it is possible to create our own types.
    - strings are texts and ints are full numbers
    - char are strings of length 1, consisting of one letter. Use single quotes for them.
    - declare an array type variable: int[] numbers; for ex
        - new int[3]; will initialize the array with a size of 3
        * array is a class and to create an instance of this class,
            we must use the "new" keyword
        - after initialized, the array will have empty/default values if nothing is assigned
        - to assign values, ex: numbers[0] = 1;
        - to inquire backwards, you can use numbers[numbers.Length -1] for example in a loop.
            * However, use the ^ operator instead. For ex: numbers[Ë†1];
            * pro tip: it is also possible to declare and initialize arrays like this:
                - var numbers = new [] {1,2,3,4,5};
                - it is an useful method if we know the elements of an array upfront.
                - we do not need to declare the sie of the array as it infers from the
                    amount of elements initialized. That also happens with the type.
        - the main disadvantage of an array is that its size is fixed.
        - ARRAYS ARE NOT EXACTLY LIKE LISTS.
    - two dimensional arrays: like matrix of values. Each number is stored in a combination of indexes.
        - very useful if we want to represent things like a chess board.
        - declaring: char[,] letters = new char[2, 3];
            - this creates a 2 by 3 table
            - to assign values, for ex: letters[0, 0] = 'A';
            - to initialize right at declaration:
                var letters = new char[,]
                {
                    { 1, 2, 3},
                    { 4, 5, 6}
                };
        - to iterate through this array, it's good to create two variable:
            - var x (or height) = letters.GetLength(0); // GetLength will return the specific length for the given dimension
              var y (or width) = letters.GetLength(1);
            - from here on, just use a for loop.
    - three dimensional arrays: are just like a cube, for example.
    ** because it is impossible to modify the size of the array,
        arrays are most useful in cases we know the size of the collection upfront.
    - list: collection of elements of a given type that its size is not fixed.
        - how to declare: List<string> words = new List<string>(); *list is a class, so we need to use the "new" keyword
        - it is possible to initialize the list with items in it:
        List<string> words = new List<string>
        {
            "one",
            "two"
        };
        * it is also possible to declare a list like this: var words = new List<string>;
        - it's also possible to access item using the index just like arrays > words[i]
        - methods:
            Add(i) will add an element
            Remove(i) will remove an element with the same given argument
            RemoveAt(i) will remove the element in the given position
            AddRange(i) takes a collection as a parameter and adds all the elements to the list
                - it's also possible to make it like this:
                    - list.AddRange(new [] {1,2,3});
            IndexOf(i) will return the index of the element of the same given argument
                - if the element is not in the list, this method will return a -1 value
            Contains(i) will return a boolean if there is an element with the same given argument
            Clear() will clear the list.


    - declaration means that a variable with given type and name will
    exist.
    - initialization is assigning the value for the given variable.
    - initialization at declaration is creating the variable and assign
    a value at the same line
    - it is possible to declare multiple variables in the same line
    - keywords can't be used as variable names
    - first character cannot be a digit
    - names are case-sensitive.
    - bool are boolean that can only take two values: true or false.
        - it is possible to create a boolean sing operators as such:
        var isLargerThan5 = 10 > 5;
        - here, we created a boolean with a "true" value as 10 is
        indeed larger than 5. It is possible to do that with all the other
        operators.

- operators:
    - +, -, *, /
    - In an expression with multiple operators, the operators with higher precedence
     are evaluated before the operators with lower precedence.
    - always use parenthesis when using operators
    - ++a or --b will increment or decrement  the value by one
    - == if something is equal to something else
    - != inequality operator
    - >, <, >=, <= work as usual
    - % returns the remainder the division of X by Y
    - AND (&&) and OR (||) are the usual and or or operators in C#.
        - && will check if all the conditions are met
        - || checks if any condition is met

* pro tip: we can break the lines into two to make it more readable:
ex:     var isEqualTo123OrEvenAndSmallerThan20 =
            number == 123 || (number % 2 == 0 && number < 20);

* pro tip: short-circuiting -  when comparing more than one condition using
    and or or, compare the smaller operations first as it will save time in case
    the conditions are met, so the program doesnt need to spend time
    with the more complex calculations.


- explicitly typed variables are variables initialized with
  specific types as int, strings and etc.
- implicitly typed variables are variables initialized with
  the "var" keyword. They also can't change types after being declared.
-code snippets are quick way of inserting code into the program.

- debugging with breakpoints:
    - gives the chance to look at the state of our code without
    having to use the "print" function on the console.

- // are used to add comment to the code
- /* this is used for multiple line comments */

- if and else example in C#:
    - if(userChoice == "ABC")
    {
        Console.WriteLine("User typed ABC")
    }
    else if(userChoice = "")
    {
        Console.WriteLine("User typed nothing")
    }
    else
    {
        Console.WriteLine("User did not type ABC")
    }

    * remember that elif will only be checked if the first IF does not pass. However if we
    use if and if, it will independently check both ifs and return both answers

- scopes: defines a part of the program where a particular variable is accessible.
- code block is a block defined by curly brackets

* pro tip: avoid repetitions on your code, instead create methods to avoid the repetitions.

- methods are the same as functions in c#
    - to create a method:
        void MethodName(return var type args)
        {
            method
        }
    * parameters are the values defined at the definition of the function
    * arguments are the actual values passed to the methods

- types of methods in C#: if we define the method as a void method,
    it will not return any value. However for example if we define a method
    as a string, it should return a string or the code will not compile.
    * void methods should not return anything.
    * all paths in a non-void method must return a value
    * remember that the keyword return always ends the method execution
    * it is possible to create methods with custom parameters, for example
    setting a class as a parameter:
        int CountOfLegs(Animal animal)
        {
            return animal.Legs.Count;
        }

* pro tip: when using if statements to check a condition, use return false
    instead of else. For ex:

        if(input.Length > 10)
        {
            return true;
        }
        return false;

        or, we can simplify it even more:
        - return input.Length > 10;

        - code refactoring is the process of improving the code quality without
            altering its behavior.


- C# is a statically-typed programming language, meaning that the compiler
    will check if there are no type mismatches during the compilation.
- Runtime errors happen when the application is running.
- Compilation errors happen during the compilation.

- String Interpolation: the same of formatting strings in python
    - in C#, use $ sign. Ex: $"First is {a}, second is {b}"

- Switch statements: used to select one of many code blocks to be executed.
    * specially useful when creating if statements with many mutually exclusive conditions
    - For example, instead of using:
    if a = b:
        do this
    else if a = c:
        do this

    we can write:
    switch(A)
    {
    case B:
        do this;
        break;
    case C:
        do this;
        break;

    default: // this is like a final else
        do this;
        break;

    if we want to add multiple options for one case, it is possible to do:
    case A:
    case B:
        do this;
        break;

    * check Calculator2 for a full example

- loops in C#:
    * pro tips: using operator += instead of x = x+1,
        it also works with strings and other mathematical operators before the =.
        ++ operator increments by 1. Ex: x++ or ++x;. These are different things and depending on
        what you are coding, they might change the result of your code.

    - while: it is executed as long as some condition is met
        - while(X){
            do this;
            }

    - do...while: the condition is checked after executing the code, so the code will always
        be executed at least once:
        do
        {
            do this;
        }
        while(condition);

        - For example: this code will check if the user typed a word longer than 10 letters,
            if not, it will keep asking until the condition is not met.
        do
        {
            Console.WriteLine("enter a word longer than 10 letters");
            word = Console.ReadLine();
        }
        while(word.Length <= 10);
        * have to declare the var "word" before the do...while loop

        * pro tip: assigning variables with default values could cause bugs in the future in case we
            want to modify our code

    - for: used to execute a code a given number of times. The example below shows how to
        perform a for loop in C#:
            - for(int i=0, i<5, ++i){
                do this;
            }

            * realize that we must specify 3 sections. The first one is executed only one
            time before entering the loop, usually a local variable. It cant be accessed from outside
            the loop. The next section is the condition and it must be a bool type expression.
            * you can also increment the last section by 2, 4 or whatever. It is also possible to make it backwards:
                - (int i=10; i>5; --i).
            * break keyword will stop the loop
            * continue keyword stop the execution of the loop for a certain condition but not the loop itself
            * string.All(char.IsDigit) checks if all the characters in an input are digits

    - nested loops: for each run of the outer loop, the inner loop will run. Avoid nested loops whenever it is possible.
        * however if necessary, move the heavier code expression to the outer loop

    - foreach: iterates through a collection but instead of index, it goes through the elements themself.
        - also, foreach loops dont require a specific bounds minimum or maximum.
        foreach(var word in words)
        {
            code here
        }

    ** quick note: for loops are better when iterating on arrays, but foreach is a better option when iterating through lists.
        - the for loop iterates over the list using its index, while foreach directly access each element of the list.
        - the foreach takes more time as it uses extra memory spaces.
        - both can achieve the same results, but foreach will be more readable and clean. However, For loop will have a better performance.
        - also remember that the foreach won't give you access to the index, so if you want it, use the for loop.

    * pro tip: sometimes, creating a function to verify a condition is really helpful when leet coding.
        - check this quiz for example: https://www.udemy.com/course/ultimate-csharp-masterclass/learn/quiz/5902762#overview

- Array: the most basic collection type in C#, storing multiple elements of the same type.
    - these are collections of fixed size, so once an array is created, its size cannot be changed.

- out keyword: word used as parameter to extract more than one value from the method in form of a variable.
- TryParse: returns a bool if the input is parseable to int and returns the value of the string as an out variable

** pro tip: whenever developing code, if you ever have repetition, create a method for it instead.
** pro tip: when organizing the methods in a file, we want the more essential and high level methods at the top of the file.


- Compilation: process of transforming the source code into a
format that the computer can understand. That's what a compiler'll do.

- After "build", a .exe file is created and we can use that to share
our project with other people. Other files are also important as
the .dll file for example.

- every code in C# is compiled into a .dll

- variables:
    - has to have a type, value and name.
    - variables cannot change type
    - when using the variable for the first time, remember to declare
    the variable type.
    - it is possible to create our own types.
    - strings are texts and ints are full numbers
    - char are strings of length 1, consisting of one letter. Use single quotes for them.
    - declare an array type variable: int[] numbers; for ex
        - new int[3]; will initialize the array with a size of 3
        * array is a class and to create an instance of this class,
            we must use the "new" keyword
        - after initialized, the array will have empty/default values if nothing is assigned
        - to assign values, ex: numbers[0] = 1;
        - to inquire backwards, you can use numbers[numbers.Length -1] for example in a loop.
            * However, use the ^ operator instead. For ex: numbers[Ë†1];
            * pro tip: it is also possible to declare and initialize arrays like this:
                - var numbers = new [] {1,2,3,4,5};
                - it is an useful method if we know the elements of an array upfront.
                - we do not need to declare the sie of the array as it infers from the
                    amount of elements initialized. That also happens with the type.
        - the main disadvantage of an array is that its size is fixed.
        - ARRAYS ARE NOT EXACTLY LIKE LISTS.
    - two dimensional arrays: like matrix of values. Each number is stored in a combination of indexes.
        - very useful if we want to represent things like a chess board.
        - declaring: char[,] letters = new char[2, 3];
            - this creates a 2 by 3 table
            - to assign values, for ex: letters[0, 0] = 'A';
            - to initialize right at declaration:
                var letters = new char[,]
                {
                    { 1, 2, 3},
                    { 4, 5, 6}
                };
        - to iterate through this array, it's good to create two variable:
            - var x (or height) = letters.GetLength(0); // GetLength will return the specific length for the given dimension
              var y (or width) = letters.GetLength(1);
            - from here on, just use a for loop.
    - three dimensional arrays: are just like a cube, for example.
    ** because it is impossible to modify the size of the array,
        arrays are most useful in cases we know the size of the collection upfront.
    - list: collection of elements of a given type that its size is not fixed.
        - how to declare: List<string> words = new List<string>(); *list is a class, so we need to use the "new" keyword
        - it is possible to initialize the list with items in it:
        List<string> words = new List<string>
        {
            "one",
            "two"
        };
        * it is also possible to declare a list like this: var words = new List<string>;
        - it's also possible to access item using the index just like arrays > words[i]
        - methods:
            Add(i) will add an element
            Remove(i) will remove an element with the same given argument
            RemoveAt(i) will remove the element in the given position
            AddRange(i) takes a collection as a parameter and adds all the elements to the list
                - it's also possible to make it like this:
                    - list.AddRange(new [] {1,2,3});
            IndexOf(i) will return the index of the element of the same given argument
                - if the element is not in the list, this method will return a -1 value
            Contains(i) will return a boolean if there is an element with the same given argument
            Clear() will clear the list.


    - declaration means that a variable with given type and name will
    exist.
    - initialization is assigning the value for the given variable.
    - initialization at declaration is creating the variable and assign
    a value at the same line
    - it is possible to declare multiple variables in the same line
    - keywords can't be used as variable names
    - first character cannot be a digit
    - names are case-sensitive.
    - bool are boolean that can only take two values: true or false.
        - it is possible to create a boolean sing operators as such:
        var isLargerThan5 = 10 > 5;
        - here, we created a boolean with a "true" value as 10 is
        indeed larger than 5. It is possible to do that with all the other
        operators.

- operators:
    - +, -, *, /
    - In an expression with multiple operators, the operators with higher precedence
     are evaluated before the operators with lower precedence.
    - always use parenthesis when using operators
    - ++a or --b will increment or decrement  the value by one
    - == if something is equal to something else
    - != inequality operator
    - >, <, >=, <= work as usual
    - % returns the remainder the division of X by Y
    - AND (&&) and OR (||) are the usual and or or operators in C#.
        - && will check if all the conditions are met
        - || checks if any condition is met

* pro tip: we can break the lines into two to make it more readable:
ex:     var isEqualTo123OrEvenAndSmallerThan20 =
            number == 123 || (number % 2 == 0 && number < 20);

* pro tip: short-circuiting -  when comparing more than one condition using
    and or or, compare the smaller operations first as it will save time in case
    the conditions are met, so the program doesnt need to spend time
    with the more complex calculations.


- explicitly typed variables are variables initialized with
  specific types as int, strings and etc.
- implicitly typed variables are variables initialized with
  the "var" keyword. They also can't change types after being declared.
-code snippets are quick way of inserting code into the program.

- debugging with breakpoints:
    - gives the chance to look at the state of our code without
    having to use the "print" function on the console.

- // are used to add comment to the code
- /* this is used for multiple line comments */

- if and else example in C#:
    - if(userChoice == "ABC")
    {
        Console.WriteLine("User typed ABC")
    }
    else if(userChoice = "")
    {
        Console.WriteLine("User typed nothing")
    }
    else
    {
        Console.WriteLine("User did not type ABC")
    }

    * remember that elif will only be checked if the first IF does not pass. However if we
    use if and if, it will independently check both ifs and return both answers

- scopes: defines a part of the program where a particular variable is accessible.
- code block is a block defined by curly brackets

* pro tip: avoid repetitions on your code, instead create methods to avoid the repetitions.

- methods are the same as functions in c#
    - to create a method:
        void MethodName(return var type args)
        {
            method
        }
    * parameters are the values defined at the definition of the function
    * arguments are the actual values passed to the methods

- types of methods in C#: if we define the method as a void method,
    it will not return any value. However for example if we define a method
    as a string, it should return a string or the code will not compile.
    * void methods should not return anything.
    * all paths in a non-void method must return a value
    * remember that the keyword return always ends the method execution
    * it is possible to create methods with custom parameters, for example
    setting a class as a parameter:
        int CountOfLegs(Animal animal)
        {
            return animal.Legs.Count;
        }

* pro tip: when using if statements to check a condition, use return false
    instead of else. For ex:

        if(input.Length > 10)
        {
            return true;
        }
        return false;

        or, we can simplify it even more:
        - return input.Length > 10;

        - code refactoring is the process of improving the code quality without
            altering its behavior.


- C# is a statically-typed programming language, meaning that the compiler
    will check if there are no type mismatches during the compilation.
- Runtime errors happen when the application is running.
- Compilation errors happen during the compilation.

- String Interpolation: the same of formatting strings in python
    - in C#, use $ sign. Ex: $"First is {a}, second is {b}"

- Switch statements: used to select one of many code blocks to be executed.
    * specially useful when creating if statements with many mutually exclusive conditions
    - For example, instead of using:
    if a = b:
        do this
    else if a = c:
        do this

    we can write:
    switch(A)
    {
    case B:
        do this;
        break;
    case C:
        do this;
        break;

    default: // this is like a final else
        do this;
        break;

    if we want to add multiple options for one case, it is possible to do:
    case A:
    case B:
        do this;
        break;

    * check Calculator2 for a full example

- loops in C#:
    * pro tips: using operator += instead of x = x+1,
        it also works with strings and other mathematical operators before the =.
        ++ operator increments by 1. Ex: x++ or ++x;. These are different things and depending on
        what you are coding, they might change the result of your code.

    - while: it is executed as long as some condition is met
        - while(X){
            do this;
            }

    - do...while: the condition is checked after executing the code, so the code will always
        be executed at least once:
        do
        {
            do this;
        }
        while(condition);

        - For example: this code will check if the user typed a word longer than 10 letters,
            if not, it will keep asking until the condition is not met.
        do
        {
            Console.WriteLine("enter a word longer than 10 letters");
            word = Console.ReadLine();
        }
        while(word.Length <= 10);
        * have to declare the var "word" before the do...while loop

        * pro tip: assigning variables with default values could cause bugs in the future in case we
            want to modify our code

    - for: used to execute a code a given number of times. The example below shows how to
        perform a for loop in C#:
            - for(int i=0, i<5, ++i){
                do this;
            }

            * realize that we must specify 3 sections. The first one is executed only one
            time before entering the loop, usually a local variable. It cant be accessed from outside
            the loop. The next section is the condition and it must be a bool type expression.
            * you can also increment the last section by 2, 4 or whatever. It is also possible to make it backwards:
                - (int i=10; i>5; --i).
            * break keyword will stop the loop
            * continue keyword stop the execution of the loop for a certain condition but not the loop itself
            * string.All(char.IsDigit) checks if all the characters in an input are digits

    - nested loops: for each run of the outer loop, the inner loop will run. Avoid nested loops whenever it is possible.
        * however if necessary, move the heavier code expression to the outer loop

    - foreach: iterates through a collection but instead of index, it goes through the elements themself.
        - also, foreach loops dont require a specific bounds minimum or maximum.
        foreach(var word in words)
        {
            code here
        }

    ** quick note: for loops are better when iterating on arrays, but foreach is a better option when iterating through lists.
        - the for loop iterates over the list using its index, while foreach directly access each element of the list.
        - the foreach takes more time as it uses extra memory spaces.
        - both can achieve the same results, but foreach will be more readable and clean. However, For loop will have a better performance.
        - also remember that the foreach won't give you access to the index, so if you want it, use the for loop.

    * pro tip: sometimes, creating a function to verify a condition is really helpful when leet coding.
        - check this quiz for example: https://www.udemy.com/course/ultimate-csharp-masterclass/learn/quiz/5902762#overview

- Array: the most basic collection type in C#, storing multiple elements of the same type.
    - these are collections of fixed size, so once an array is created, its size cannot be changed.

- out keyword: word used as parameter to extract more than one value from the method in form of a variable.
- TryParse: returns a bool if the input is parseable to int and returns the value of the string as an out variable

** pro tip: whenever developing code, if you ever have repetition, create a method for it instead.
** pro tip: when organizing the methods in a file, we want the more essential and high level methods at the top of the file.

-=-=-=-=-=-=-= Objected Oriented Programming in C# -=-=-=-=-=-=-=-
- Why we need oop
- Defining classes and specifying their methods, fields, properties, and constructors
- Encapsulation, data hiding, abstraction
- Designing classes
- Single Responsibility Principle
- Refactoring step-by-step

- levels of abstraction:
    - High:
        - user can add TODOs
        - app saves TODOs
        - user can choose an action
        - user can login to the app

    - Low:
        - communication via console/GUI
        - MS SQL database is used to store TODOs
        - user clicks a bootstrap-styled button to choose an action
        - user can login with gmail and facebook accounts

- antipattern: something we should avoid if our code is supposed to be of high quality.
    - an example of this is spaghetti code.

- Issues caused by procedural programming:
    - spaghetti code
    - no way to control who can access methods
    - no separation by levels of abstraction
    - changes in requirements are hard to implement
    - logic is not easily configurable

- Class: a blueprint for objects of the same type
- Objects: containers for data and methods
- Instance: same as objects

- Constructor: a method used specifically to create new class instances

- Abstraction: means that classes expose only essential data and methods and hide
    the underlying details

- How to declare a class in c#:

class Rectangle
{
    int width; // a field is a variable that belongs to an object of a class
    int height;
}

    - In this case, we are initializing the object without a constructor, meaning
        that the default value for the parameters will be 0.

    - However, even if we try to access the value of width and height, the code wont compile.
        This is because of data hiding.

- How to declare a constructor:

class Rectangle
{
    public int Width:
    public int Height;

    //constructor. The name should be the same as the type it belongs to.
    // no return type
    public Rectangle(int width, int height)
    {
        Width = width;
        Height = height;
    }
}

    - remember that the default parameterless constructor is only autogenerated
        if we dont provide any constructor of our own.
        - however, if we assign values when declaring the variables, it will become the default values.

- Data hiding: making the members of a class non-public
    - class members are anything that a class contains, especially fields and methods.
    - we should only make a member public if it is necessary.
    - making class members public can be a source of risk
    - to control who can access components of a class, we use the access modifiers:
        - PRIVATE: members can only be accessed from within the class it belongs too.
        - PUBLIC: members can only be accessed everywhere.
        - if we dont specify the modifier when initializing a member, it will se the value to default, which is private.

    - So in this case, we can create a method INSIDE the class that will be able to access the given private information

    void DummyMethod()
    {
        Console.WriteLine($"height is" + height);
    }

    - to make fields accessible for methods/etc outside the function, the use the keyword public when declaring them.
        ex: public int width;

    - adding the public keyword will also make it possible for changing the values of the fields
    - the keyword also works for methods and etc

    ** pro tip: by convention, this is how we should name our fields:
        - public: should start with capital letter, for ex: Width, Height.
        - private: should start with an underscore, for ex: _width, _height

- Virtually, all C# code we write must belong to some class. No variable should be
    outside a class.

    - while we actually might not see, there is a featured created to hide all the 10 lines of code
      defining the main class/program class that was necessary before. SO even though we might not see it
      if we are writing lines of code "without a class", there is actually a class.
      This is the top-level statements feature.
      It is only possible to use this in one file of the program.
      Be aware that if we declare methods outside a class, they cannot have modifiers.

- Declaring methods in a class:
    - the name of a method should always start with a verb. This makes it easier to distinguish methods from fields and etc.
    for ex:

    // the default access modifier is always the one most restrictive that is valid in a given context.
    // however, always specify the scope as it is a good practice.
    private int CalculateCircumference()
    {
        return 2 * Width + 2 * Height;
    }

    public int CalculateAre()
    {
        return Width * Height;
    }

- Encapsulation: bundling data with methods that operate on this data (in single class).
    - for example, if we look at the the above examples using the rectangle class, we defined the fields
    and the methods inside the same class. This is encapsulation. Think of it as a pill (class) that has both methods and fields.

    - However, it is possible to create the methods in a different class. We could've created a class dedicated only to calculate shapes, areas and etc.

    class ShapesMeasurementsCalculator
    {
        public int CalculateRectangleArea(Rectangle rectangle)
        {
            return rectangle.Width * rectangle.Height;
        }

    }

    ** check classExample code for a better explanation

    - However, which approach is better? It depends on the case =D.
        For our example, encapsulation would be better as it is expected to find the calculators for a rectangle IN the rectangle class.
            it is sort of a elementary method.
            Also, using other class to calculate the values, forces us to make the data public. Usually, we do not want it.

    - Encapsulation and DAta Hiding are not the same thing.
        - Encapsulation is bundling data with methods that operate on it in the same class.
        - Data hiding is making fields private instead of public.

Method overloading: multiple methods with the same name in a single class.
    - for example:

    class MedicalAppointment
    {
        private string _patientName;
        private DateTime _date;

        public MedicalAppointment(string patientName, DateTime date)
        {
            _patientName = patientName;
            _date = date;
        }

        public void Reschedule(DateTime date)
        {
            _date = date;
        }

        public void Reschedule(int month, int day)
        {
            _date = new DateTime(_date.Year, month, day);
        }

        // as you can see, we have two different methods with the same name in the same class.
        // as long as we can tell the difference between both, it is fine. This is method overloading.
        * both two methods have the same name but do different stuff, however similar.

        public void Reschedule(int monthsToAdd, int daysToAdd)
        {
            _date = new DateTime(
                _date.Year,
                _date.Month + monthsToAdd,
                _date.Day + daysToAdd);
        }

        // as you can see, this won't compile because this method and the previous one have the same signature.
        // this is why when overloading, we have to make sure it is possible to distinguish them by parameters or etc but not returns.
        // if such thing happens though, it is preferable to just rename the methods. For example MoveDays and etc.
    }

- when overloading, we can distinguish the methods through different parameters or different types of parameters.

- overloading can also be done for constructors. Same rules are applied.

- How to make methods shorter by converting them to expression-bodied methods:
    - if your method only contains a single expression, you can write it in one line using a special
      syntax

      ** expression is something that evaluates to a value.
        - ex: 1+2 or a GetText() method for example.
        a statement is something that does not evaluate to a value
        - ex: Console.WriteLine("Hi!").

    special syntax:

    - public int CalculateCircumference()
    {
        return 2*Width+2*Height;
    }

    becomes:

    public int CalculateCircumference() => 2*Width+2*Height;

    * However, keep in mind that we can only use this syntax when we only have one statement or expression in the method.

- this keyword: refers to the current instance of the class. It can be used to access instance members, call other constructors, pass the current instance to other methods, and define extension methods.
    - it is used in scenarios where there might be ambiguity between instance variables and parameters with the same name, or to explicitly reference the current instance within a method or constructor.
    - for example, let's say I want a class Dog to have two different constructors, we can use the keyword "this" to make th code simpler.

    public class Dog{
        private string _name;
        private string _breed;
        private int _weight;

        public Dog(string name, string breed, int weight){
            _name = name;
            _breed = breed;
            _weight = weight;
        }
        // so far, so good. But let's create a constructor for cases where we don't have a breed assigned.

        public Dog(string name, int weight) : this(name, "mixed-breed", weight)
        {
        }



- optional parameters: optional parameters must appear after all required parameters.
    - in case of ambiguity, the methods with no optional parameters are used.
    - when using multiple optional parameters, we must remember that if we provide some of them, we must also provide all preceding optional parameters.
    for ex:
    // as you can see, the B variable is optional. We can change it's value when calling the method, but we are not obligated to use it.
    int Subtract(int a, int b = 0)
    - the default value must be compile-time constant, meaning it needs to be a simple value like ints, strings or bools. It means it won't accept values that are valued at runtime.

- How to validate the constructor parameters:
    - For example, let's say a programmer wants to create a rectangle with negative values.

    public Rectangle(int width, int height)
    {
        int defaultValueIfNonPositive = 1;
        if(width <= 0)
        {
            Console.WriteLine("Width must be a positive number.");
            Width = defaultValueIfNonPositive;
        }
        else
        {
            Width = width;
        }

        if(height <= 0)
        {
            Console.WriteLine("Height must be a positive number.");
            Height = defaultValueIfNonPositive;
        }
        else
        {
            Height = height;
        }
    }

    - However, this is very repetitive, so let's create a method to validate any of the numbers:

    private int GetLengthOrDefault(int length, string name)
    {
        if (length < 0){
        Console.WriteLine($"{name} must be a positive number.")
        return defaultValueIfNonPositive;
        }
    }

    - Now, let's apply it:

    public Rectangle(int width, int height){
        // nameof is better so in case we rename these things someday, we won't need to worry about changing the name of the variable in the future.
        Width = GetLengthOrDefault(width, nameof(width));
        Height = GetLengthOrDefault(height, nameof(height));

- Readonly field can only be assigned at the declaration or in the constructor.
    - after the object is created, it's impossible to change the assigned values.
    - immutability means that once an object is created, it will never be modified.
    ** pro tip: whenever we create a field we don't intend to change in the future, make it readonly if possible.

- Const modifier can be applied to both variables and fields.
    - those variables and fields must be assigned at declaration and can never be modified afterward.
    - they must be given a compile-time constant value, so a value that can be evaluated during the compilation, before the application is run.
    - const fields and variables should always be named with a capital letter even if they are private.

- The main difference between const and readonly is that consts must be assigned a value at declaration.
    - we use readonly fields when we want a field never to change after it has been set in the constructor

- Object's properties:

    - properties are actually more related to methods than fields. Still, the names should be nouns.
        - think of it as attributes in python.
        - properties can use different modifiers, like private set and public get
        ex of how to use it:
        public int Width { get; private set; }
        or
        public int Height {
            get => _height;
            set => _height = value;
        }
        *can also use private operators on get or set.

    - fields are variable-like, single access modifier, no separate getter and setter, cannot be overridden in derived classes and should always be private.
    - properties are method-like, separate access modifiers for getter and setter, getter or setter may be removed, can be overridden in derived classes and can safely be public.

- object initializers: useful to create simple objects.
    - var person = new Person{
        Name = "John",
        YearOfBirth=1920
        };
    * it is also possible to do it like this:
    var person = new Person("John"){
        YearOfBirth = 1900
        };

- init setter:
    public int YearOfBirth { get; init; } // the init makes it possible to set a value for the property when initializing the object, but won't be possible to change the value in the future.
    when using a constructor, we must provide all the required parameters.

- computed properties:

    public string Description => $"A rectangle with width {Width} " + $"and height {_height}"; // this creates a get only property.
    - as you can remember, properties are like methods. If you have a method to calculate Width and _height, it means that if we use the property 1000x, it will call the method 1000x.
    - for that reason computed properties are no a good idea.
    ** pro tip: properties should never be performance heavy.

- Static classes and static methods:
    - Stateless (has no state): it means the class can't create two different objects:
        - For ex:
            class Calculator
            {
                public int Add(int a, int b) => a+ b;
            }
            ** as you can see, it doesn't matter if we create 4 different objects, all of them will be the same as the class has no unique characteristics to be assigned.
    - Stateful (has state-fields)

    - So, static methods are methods that belong to a class as a whole, not to a specific instance.
        - static methods cant use the instance data like values of fields or returned by properties.
        - following the above example, it means that we don't need to create an object to use it.
            we could simply call it "Calculate.Add(x,y)" like we do with the class Console when using WriteLine.

    - if all the methods in a class are static, we can make the whole class static.
        - a static class cannot be instantiated. It only works as a container for methods.
        - static classes can only contain static methods. Otherwise, the code won't compile.
            - on the other hand, non-static classes can contain static methods.

    ex of a static class:

        static class Calculator {
            public static int Add(int a, int b) => a+b;
        }

    ** pro tip: CTRL + click at a method name and you will jump to the method.
    ** pro tip: if a private method doesn't use instance data, make it static.
    - using fields of a class on a static method won't work because static methods call the class as a whole, not specific instances.
    - static methods are also faster.
    - all const fields are implicitly static because it can be saved to memory to be accessed whenever a new instance is created since it is always the same.
        - it means that we access the field by using the class name, not the instance's.
    
    - generally, static fields are used when we need to share a single member between all instances.
        - nonetheless, avoid using static fields.

- Single Responsibility Principle: 
    - first principle of SOLID that every developer should follow.
    - A class should be responsible for only one thing / class should've only one reason to change.

    * two programs doing the same thing can be of an entirely different quality.
    * quality mostly shows up when we need to introduce changes in the program.

    - Repositories are classes or components that encapsulate the logic required to access data sources.
    * Environment.NewLine creates a new line in a file.

- DRY:
    - states we shouldn't have multiple places in the code where the same business decisions are defined.

- How to add new files to a project:
    - simply add a new Class/Interface file.
- How to move classes to their own files:
    - copy and paste.
- What namespaces are:
    - namespaces declare a scope that contains a set of related types.
    - namespaces names should match the folders structure.
    the types from the same namespace always see each other (no using directive is required).
- What using directives are:
    - allows you yo use types defined in a namespace without specifying the fully qualified namespace of that type.
    - global using will import the namespace automatically to every file
- What file-scoped namespace declarations are:
    - smaller way to declare a namespace.

- enum: enum is a type that defines a set of named constants, for ex:

    public enum Season{
        Spring,
        Summer,
        Autumn,
        Winter,
    }

    or

    public enum WarningSeverityLevel{
        Info,
        Warn,
        Error,
        Critical
    }
    Season firstSeason = Season.Spring;

    - every value of an enum is represented as an integer by default: 0, 1, 2, 3.....
    - however, if we Console.WriteLine(firstSeason), it will print the name of the enum.
        - to see it's actual value, we must use casting.
            - casting happens when we assign a data type to another.
        - because C# is statically typed, it doesnt allow a type A to be assigned to a type B
        - for ex: int firstSeasonAsNumber = firstSeason; won't work because we are assigning a type Season to a             type int.
        - So, we force it by using a type conversion, this is casting:
            - int firstSeasonAsNumber = (int)firstSeason;
        - even though you can cast, if the value is incompatible, for ex casting int on a string, it will cause             runtime crashes or incorrect results.

- Polymorphism: The provision of a single interface to entities of different types.
    - there is a generic concept of something, and this concept can be made concrete by multiple types.
        all of them can be used wherever the generic concept is needed.

- Inheritance: enable us to create new classes that reuse, extend, and modify
    the behavior defined in other classes.
    - the class whose members are inherited is called the base class,
    and the class that inherits those members is called the derived class.
    - Inheritance is an "is-a" kind of relationship.
    public class Ingredient{
    }

    public class Cheddar : Ingredient {
    }

    - public methods are inherited to the other classes.
    - private methods are not inherited to the other classes.

    - Protected access modifier: members can be used in the derived classes, but they can't be used outside. It means that you can use the members inside the class,
        but can never call it from outside.

    - inheritance won't work with private fields
    - also, it is possible to store a Cheddar object in a Ingredient variable:
        - Ingredient ingredient = new Cheddar();

    - virtual methods or properties may be overridden by the inheriting types.
    - it is useful for example:

    Let's say you have the a string called Name on the Cheddar class. Although the variable has a Cheddar object stored in it,
        you won't be able to call Name because it is not a property of the Ingredient class. The way to solve the issue is to create
        a field in the Ingredient class also called Name. However, if we use the Cheddar object to call Name, it will display the
        Ingredient's class Name, not the Cheddar's. To solve that, we add the "override" modifier to the field in the Cheddar's class and "virtual" in the Ingredient class,
        so when we call it, C# will understand that we are calling it from the Cheddar class.

        public virtual/override string String => "Bla";

    - it is also possible to create a list of type Ingredient and add the derived classes to the list.

    ** summary: virtual methods or properties may be overridden by the inheriting types.

- Multiple inheritance: sometimes we the hierarchy to contain more than  2 types.
    - Using the ingredient example from above, let's assume we wanted to create a class called Cheese.
        - that class would be a derived class from ingredient. If we then create another class called Cheddar whose base class is Cheese,
            it would also inherit from the Ingredient class.
            Cheddar > Cheese > Ingredient
            - it means for example that if a method accepts a Ingredient type, it will also accepts a Cheddar type object.
            - having a deeper hierarchy is good to understand some more complex relationships, but be careful to not over use it or it will become something hard to understand.

            - In C# it is not possible to have more than 1 base class.
                - the reason why you can't have multiple base classes is because it leads to a problem called the diamond problem.
                ** it is possible through interfaces.


- System.Object: is the ultimate base class for all the other classes created.
     - the roots of every class.
     - It means we can use many different methods through many different classes.

- ToString(): method used to convert things to strings.
    - However, we can use it a as a field in classes to print properties.

    - public override string ToString() => {Property};

    So, when we try Console.WriteLine(Class), it will not print the name of the class, but the property we defined in the ToString field.
        - it means that no more it will print the name of the TYPES, but the variable assigned.

- base keyword:

    - constructor >> public Cheddar(int priceIfExtraTopping, int agedForMonths) : base(priceIfExtraTopping)
    {
        AgedForMonths = agedForMonths;
    }

    ** the base keyword is responsible for initializing the properties all the Ingredients have in common.
        - as we can see, priceIfExtraTopping is the common property.
        - the base keyword is also useful when we want to refer to something from the base class in a derived class.

- Implicit conversion:
    - doesnt require cast expression
    - is done when conversion is safe and lossless

- Decimal: is used to represent precisely floating-point numbers.
    - useful for things like money.
    decimal a = 10.01m; // the "m" at the end is necessary so we can tell C# it is a decimal and not a double.
    - if done wrong, we will face runtime crashes.

- Double is also used to represent floating-point numbers in C#. Although it is not as precise as a decimal, it is much faster.

- It is possible to assign for example and int value into a decimal, but the conversion is implicit because it happens behind the scenes.

- Explicit conversion: used when there is a trim in the data.
    - if for instance we try to do:
    - decimal c = 10.01m;
      int d = c;

      it won't work. As C# won't implicitly convert it because of the data loss.
      However, we use:

      int d = (int)c;

      C# will compile because it understands we want to ignore the data loss.
      - However, it doesnt mean it will work properly. Only use explicit casting when you are 100% sure it will work.

      - By the way, the maximum value a int can store is 2147483647.
      
- Difference between upcasting and downcasting.
    - Upcasting happens when we convert a derived class into the base class.
        ex: Ingredient ingredient = new Cheddar(2, 12);
    - Downcasting is the opposite, assigning the the base class into derived class.
        ex: Cheddar cheddar = (Cheddar)randomIngredient;
        * we must be careful because a variable of base type may store an object that is not convertable
            - use is operator for that buy essentially you should not do this at all.

- Is operator: checks if some object is of a given type.
    ex: string word = "hello";
        bool isString = word is string;
        bool isInt = word is int;
    
    We can use it to check if the conversion is possible:
    ex:
        if (randomIngredient is Cheddar cheddar)
        {
            Console.WriteLine("cheddar object:" + cheddar);
        }
        
        - we can also create an inline temporary variable:
        if (randomIngredient is int >>>>>asInt<<<<<)
        {
            return asInt;
        }
        
        
- Null is a special value that means a field or a variable doesn't hold any value or instance 
    - NullReferenceException means we tried to use a member of null object. Not possible because null object is simply no object.
    - most commonly seen error in C#
    - is not null cannot be overloaded.
    - no standard types can be assigned null, for ex ints and strings
    
- "as" operator can be used to conversion too.
    - the difference between this and other method is that if the cast fails on a normal conversion, it will cause an exception
        meanwhile if we use the "as" operator, it will give a null value in case of a failed cast.
    - only works to cast to nullable types.
    
    if (cheddar is not null)
    {
        Console.WriteLine(cheddar.Name)
    }
    else
    {
        Console.WriteLine("")
    }
    
- Abstract classes:
    - serve as base classes for other, more concrete types.
    - abstract classes cannot be instantiated.
    - abstract classes can also defined abstract methods and properties.
    
    public abstract class Ingredient
    {
    }

- Abstract methods
    - virtual methods are methods that may be overriden in the derived classes.
    - However, abstract can only be defined in abstract classes.
    - They don't have implementations so their body are empty.
        - ex: public abstract void Prepare();
    - all abstract are implicitly virtual, which means we can use them in the derived classes.
        - it's obligatory to override them in the non-abstract derived classes. If the derived class is also abstract,
            there is no need to override it.
            
- Difference virtual and abstract:
    - virtual must have an implementation.
    - overriding it is optional.
    
    - abstract modifier can't have an implementation.
    - overriding it is obligatory.
    
- Sealed classes and methods:
    - sealed modifier prevents other classes from inheriting from a given class.
        - for ex, if we create a public sealed class Mozzarella, we are intending for it to never be derived. It's one of a kind.
        - the same is valid for methods.
    - only virtual, overridden methods can be sealed.
    - static classes is implicitly sealed.
    
    - Static classes are sealed because they only contain static methods and static methods cannot be overridden.
        The whole point of overriding is to have a specific implementation of a method used when executed on a specific instance
        but static methods are not called on instances but static methods are not called on instances. Which makes static classes useless as base types.

- Extension methods:

    When a type we use lacks a method we need:
        - if this type is defined in out code, we can simply add it.
        - we can create a type derived from this type, and add the method there.
            But it may overcomplicate our code, or the type we want to extend might be sealed.

    - Extension methods allow us to seemingly add methods to an existing type without modifying this type's source code.
    Steps:
        - first, we might create a folder called Extensions.
        - second, create a file for the type of extension we are creating, For example, if it is string related, we may
        call it "StringExtensions.cs".
        - third, we create the method. Extension methods can only be defined in static classes.
        - fourth, the parameter must always have a "this" operator.
        - fifth, other parameters must always come after the parameter we will use to extend.

        Ex:
            public static class StringExtensions
                {
                public static int CountLines(this string input) =>
                    input.Split(Environment.NewLine).Length;
                }

        when importing, it allows us to use syntax like the method is natively from the String class:
            - using Project.Extensions;
              string Text = @"aaaa";
              Text.CountLines()

        - these methods are very useful in allowing us to create functionality to types that we don't have access to.
        - they allow us to seemingly add methods to types that can't have methods defined like Enums.

        ** pro tip:
         - let's say I want to create a method called Next, which will return what is the next season from an Enum.

         public Enum {
            Spring,
            Summer,
            Autumn,
            Winter
         }

         When creating the method,
            public static Season Next(this Season season)
            {
                int seasonAsInt = (int)season;
                int nextSeason = (seasonAsInt + 1) % 4;
                return (Season)nextSeason
            }

            As you can see above, there could be a range issue on line 968 as if we had and int greater than 3, there would
                be no corresponding season. However, when we add the % 4, we make it calculate the modulo of four of the result,
                making it always to be a between 0 to 3 int.
- Multiline string - add the @ at the beginning. Ex: @"aaaaa"

- Interfaces:

    - interfaces create a "behaves-like" kind of relationship between types.
    how to set up an interface:
        public interface IFlyable // the "I" uppercase is convention for naming interfaces.
        {
            void Fly();
        }

        public class Bird : IFlyable
        {
            public void Fly() => Console.WriteLine("Flies using wings")
        }

        public class Plane : IFlyable
        {
            public void Fly() => Console.WriteLine("Flies using turbines")
        }

    - as you can see, even though the classes are not same-type classes like Food being base for Cheese, Bread and etc,
    they share common characteristics like flying abilities. Interfaces are useful for classes that behave in a certain way
    but still are not related.

    - an interface defines a contract, whatever type that implements the interface will have to contain a method with
     the same signature. The methods from the Interface need to be present in the class using it.
    - a method that implements the interface must be public.
    - the methods in the interface are implicitly virtual.
    - even though a class cannot derive from multiple base classes, it can sign contracts with many interfaces.
    - also, one interface may extend another.

    interface IAnimal
    {
        void MakeSound();
    }

    interface IHousePet : IAnimal
    {
        TaketoVet();
    }

    - notice that we don't need to write again the same method as it is "inherited" from the IAnimal interface.
    - 99% of cases, interfaces do not contain anything else but declaration of methods and properties.

    - cool thing about interfaces is that we can also create methods for specific classes without breaking the code. If
    you remember right, all the classes that sign contracts with an interface needs to implement all of its methods.
    However, there is a workaround for that.

    interface ICar
    {
        void GetSpeed();
        void GetMileage();
        public void SendCommand() {} // here, we create a method that DON'T need to be implement in a class that uses
                                     // this interfaces. However, we can use it if we want and C# will use the implementation instead of this default method.
    }

    // learn more about it at https://www.talkingdotnet.com/default-implementations-in-interfaces-in-c-sharp-8/


